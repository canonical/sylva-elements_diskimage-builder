---

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        OCI_TAG_FORMAT: "$CI_COMMIT_TAG"
    - when: always
      variables:
        OCI_TAG_FORMAT: "0.0.0-git-$CI_COMMIT_SHORT_SHA"

variables:
  REPO_URL: "$CI_REGISTRY_IMAGE"
  REPO_IMAGE: $REPO_URL/$DISK_IMAGE_NAME:$OCI_TAG_FORMAT
  REPO_IMAGE_SNAPSHOT: $REPO_URL/snapshots/$DISK_IMAGE_NAME:$OCI_TAG_FORMAT
  IMAGE_FORMAT: raw
  DISK_IMAGE_NAME: $OS-$OS_RELEASE-$FLAVOR-$K8S_FLAVOR
  GITLEAKS_ARGS: '--verbose --log-opts=$CI_COMMIT_SHA'
  DIB_SHOW_IMAGE_USAGE: 1
  DIB_DEBUG_TRACE: 1
  KANOD_OPTIONS_BASE: "-b no_kanod_network -b lvm -b growpart"
  # renovate: datasource=docker
  UBUNTU_CI_IMAGE: registry.gitlab.com/sylva-projects/sylva-elements/container-images/ci-disk-image-builder/ubuntu:v2.1.1
  # renovate: datasource=docker
  SUSE_CI_IMAGE: registry.gitlab.com/sylva-projects/sylva-elements/container-images/ci-disk-image-builder/suse:v2.1.1
  # renovate: datasource=docker
  GENERATE_OS_SBOM_CI_IMAGE: registry.gitlab.com/sylva-projects/sylva-elements/container-images/trivy-libguestfs:1.0.0
  # renovate: datasource=docker
  OPENSCAP_CI_IMAGE: registry.gitlab.com/sylva-projects/sylva-elements/container-images/openscap:1.0.1

stages:
  - test
  - build
  - release
  - gitleaks

include:
  - project: 'renovate-bot/renovate-runner'
    ref: v20.1.0
    file: '/templates/renovate-config-validator.gitlab-ci.yml'
    rules:
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        changes:
          paths:
            - .gitlab-ci.yml
            - renovate.json
  - project: 'sylva-projects/sylva-elements/renovate'
    ref: 1.0.0
    file: '/templates/renovate-dry-run.gitlab-ci.yml'
    rules:
      - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
        changes:
          paths:
            - renovate.json
  - project: "to-be-continuous/gitleaks"
    ref: 2.5.2
    file: "templates/gitlab-ci-gitleaks.yml"
  - project: 'sylva-projects/sylva-elements/ci-tooling/ci-templates'
    ref: 1.0.39
    file:
      - 'templates/release-notes.yml'

# Override the release notes suffix to add the images produced during the build
.release-notes-after-script:
    - |
      apk add curl bash jq
      curl -sS --header "PRIVATE-TOKEN: $RELEASE_NOTES_READ_API_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/bridges" \
        | jq ".[].downstream_pipeline.id" \
        | grep -v null \
        | xargs -i curl -sS --header "PRIVATE-TOKEN: $RELEASE_NOTES_READ_API_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/{}/jobs" \
        | jq '.[] | select(.name == "upload-report") | .id' \
        | xargs -i curl --location --header "PRIVATE-TOKEN: $RELEASE_NOTES_READ_API_TOKEN" --output artifacts-{}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/{}/artifacts"
      ls
      find . -type f -name "*.zip" -empty -delete
      for z in *.zip; do unzip -o $z || true; done
      echo "## Produced images:" >> release-notes.md
      echo " " >> release-notes.md
      cat *release.md | tee -a release-notes.md

# Override the stage to run the release notes creation after the build of the images
prepare-release-notes:
  stage: release

# Override the stage to run the release notes creation after the build of the images
create-release-notes:
  stage: release

gitleaks:
  rules:
    - when: never

# Customize gitleak job imported from to-be-continuous in order to checkout main
# (needed for git to be able to retrieve commits from this branch not in main)
gitleaks-custom:
  stage: gitleaks
  extends: gitleaks
  needs: []
  before_script:
    - echo GITLEAKS_ARGS=$GITLEAKS_ARGS
    - !reference [gitleaks, before_script]
  variables:
    GITLEAKS_ARGS: '--verbose --log-opts=origin/main..HEAD'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'   # Do not trigger gitleaks for cross-repo pipelines
      when: never
    - if: $CI_BRANCH_NAME == "main"
      variables:
        GITLEAKS_ARGS: '--verbose'    # on main, detect leaks on whole repo
    - when: always

.kubeadm_settings:
  variables:
    K8S_FLAVOR: kubeadm
    KANOD_OPTIONS_K8S: "-b kubeadm"
  parallel:
    matrix:
      - K8S_VERSION:
            # renovate: datasource=github-releases depName=kubernetes/kubernetes VersionTemplate=v
          - 1.31.5
            # renovate: datasource=github-releases depName=kubernetes/kubernetes VersionTemplate=v
          - 1.30.9
            # renovate: datasource=github-releases depName=kubernetes/kubernetes VersionTemplate=v
          - 1.29.13
            # renovate: datasource=github-releases depName=kubernetes/kubernetes VersionTemplate=v
          - 1.28.15

.ck8s_settings:
  variables:
    K8S_FLAVOR: ck8s
    KANOD_OPTIONS_K8S: "-b ck8s"
  parallel:
    matrix:
      - K8S_VERSION:
          - 1.31.5

.rke2_settings:
  variables:
    K8S_FLAVOR: rke2
    KANOD_OPTIONS_K8S: "-b rke2_airgapped"
  parallel:
    matrix:
      - K8S_VERSION:
          # renovate: datasource=github-releases depName=rancher/rke2 VersionTemplate=v
          - 1.31.5+rke2r1
          # renovate: datasource=github-releases depName=rancher/rke2 VersionTemplate=v
          - 1.30.9+rke2r1
          # renovate: datasource=github-releases depName=rancher/rke2 VersionTemplate=v
          - 1.29.13+rke2r1
          # renovate: datasource=github-releases depName=rancher/rke2 VersionTemplate=v
          - 1.28.15+rke2r1

.ubuntu_settings:
  variables:
    OS: ubuntu
    OS_RELEASE: noble
    # Label used to select OpenSCAP SSG file for security scan
    # e.g. /usr/share/xml/scap/ssg/content/ssg-ubuntu2204-ds.xml is used for ubuntu jammy
    SSG_FILE_LABEL: ubuntu2204
    # profiles contained in the DS file
    SSG_PROFILE_LIST: "standard cis_level1_server cis_level2_server"

.opensuse_settings:
  variables:
    OS: opensuse
    OS_RELEASE: "15.6"
    # Label used to select OpenSCAP SSG file for security scan
    # e.g. /usr/share/xml/scap/ssg/content/ssg-opensuse-ds.xml is used for opensuse
    SSG_FILE_LABEL: opensuse
    SSG_PROFILE_LIST: "standard"
    OVAL_URL: "https://ftp.suse.com/pub/projects/security/oval/opensuse.leap.15.6.xml"

.default-trigger:
  trigger:
    include: .gitlab/ci/pipeline-build-and-test.yml
    strategy: depend
    forward:
      pipeline_variables: true
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_LABELS =~ /AutoMerge/
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
      when: manual

build-ubuntu-hardened-rke2:
  extends:
    - .default-trigger
    - .rke2_settings
    - .ubuntu_settings
  variables:
    FLAVOR: hardened
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S -b cis_remediation"

build-ubuntu-plain-rke2:
  extends:
    - .default-trigger
    - .rke2_settings
    - .ubuntu_settings
  variables:
    FLAVOR: plain
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S"
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_LABELS =~ /AutoMerge/
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
      when: manual
      allow_failure: true

build-ubuntu-plain-kubeadm:
  extends:
    - .default-trigger
    - .kubeadm_settings
    - .ubuntu_settings
  variables:
    FLAVOR: plain
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S"

build-ubuntu-plain-ck8s:
  extends:
    - .default-trigger
    - .ck8s_settings
    - .ubuntu_settings
  variables:
    FLAVOR: plain
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S"

build-opensuse-plain-rke2:
  extends:
    - .default-trigger
    - .rke2_settings
    - .opensuse_settings
  trigger:
    include: .gitlab/ci/pipeline-build-and-test-suse.yml
    strategy: depend
  variables:
    FLAVOR: plain
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S"
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_LABELS =~ /AutoMerge/
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: manual
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == 'pipeline'
      when: manual
      allow_failure: true

build-opensuse-plain-kubeadm:
  extends:
    - .default-trigger
    - .kubeadm_settings
    - .opensuse_settings
  trigger:
    include: .gitlab/ci/pipeline-build-and-test-suse.yml
    strategy: depend
  variables:
    FLAVOR: plain
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S"

build-opensuse-hardened-rke2:
  extends:
    - .default-trigger
    - .rke2_settings
    - .opensuse_settings
  trigger:
    include: .gitlab/ci/pipeline-build-and-test-suse.yml
    strategy: depend
  variables:
    FLAVOR: hardened
    KANOD_OPTIONS: "$KANOD_OPTIONS_BASE $KANOD_OPTIONS_K8S -b cis_remediation_opensuse"
