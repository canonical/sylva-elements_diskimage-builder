Developing your own image
=========================
`kanod-image-builder` is an extension of `diskimage-builder` designed around
two core ideas:

* kanod elements can specify their configuration through contributions to
  `kanod-configure` python scripts launched during the cloud-init phase. Those
  contributions are described by an extension to the JSON schema describing
  the configuration file and python functions implementing the configuration
  business logic.
* The build of an image is a sequence of elements in a context defined by
  environment variables. These sequence and context are defined through the
  interpretation of a Yaml file and the options supplied by the end-user.

Integration of kanod configuration with cloud-init
--------------------------------------------------

Image built with ``kanod-image-builder`` should be booted with a simple
cloud-init that only contains a call to ``kanod-bootcmd`` in the `bootcmd` phase
and a call to ``kanod-runcmd`` in the `runcmd` phase. Those elements will use
settings coming from a file (``/etc/kanod-configure/configuration.yaml``)
for ``kanod-runcmd`` and from the standard inputfor ``kanod-bootcmd``.

Usually either ``kanod-boot`` or Metal3 configurations generated by
``kanod-updater`` are used to launch the server and they follow those
conventions.

During the first boot, `cloud-init` is run during two different phases and kanod
configuration elements are run at two different times:

* Early during the boot process, ``kanod-boot`` is called. This element is mostly
  for low level system configuration like redefining the kernel parameters,
  resizing disks, etc. This command is in fact launched after each boot
  but it is possible to prevent part of it from running more than once.
* ``kanod-runcmd`` is run much later. It will perform the real network
  configuration and, if configured, it connects to Vault. After the initial
  phase, the different configuration elements registered by diskimage-builder
  elements can be run according to their priority. In fact it is even possible,
  at the developer own risk, to register modifications occuring during the
  early configuration phase, for example for specific network settings.

Anatomy of a configurable element
---------------------------------
As any diskimage builder element, a Kanod configurable element should implement
a single functionality implemented by a set of packages and scripts installed
during the build of the image. We refer the developer to the diskimage builder
documentation for this part.

A Kanod configurable element differs by the fact that it can be configured
during the first boot by some elements of the Yaml configuration given to

The cloud-init commands launched at boot time are generated by the
``kanod-configure`` element. This element should be a dependency of
any element using Kanod cloud-init configuration.

Elements using Kanod cloud-init configuration should contain:

* a specification of the elements describing the configuration in JSON schema
  format expressed as a Yaml file named ``schema.yaml``
* a set of python files in a folder named ``kanod``. diskimage builder **requires**
  that all files in different elements have different names so it is recommended
  to prefix them with the name of the element.

Python part
^^^^^^^^^^^

The python files will be included in the build of Kanod cloud-init commands. They
should register subcommand interpreting the configuration using the following
elements from the ``kanod_configure.common`` module:

* ``register(name, priority, code)``

  * ``name: str`` a name for the contribution. Will be displayed in the
    cloud-init log,
  * ``priority: int`` a priority for the element, low values are executed first
  * ``code`` a function taking a RunnableParams object as argument. This object
    contains three useful fields:

      * ``conf`` is the complete Yaml configuration supplied by the user of the
        machine
      * ``system`` is an image specific file. It is no longer really useful.
        The path is ``/etc/kanod-configure/system.yaml``
      * ``init`` an internal cloud init data structure initialized during the
        early phase. It can be used to access cloud-init specific code such
        as networking configuration. Regular users should not relie on it and
        it is only really useful to avoid rewriting features provided by the
        standard cloud-init.

* ``register_boot(name, priority, code)`` registers an element run during
  the early phase (bootcmd). It does not have access to the `init` parameter
  and its configuration is limited to the `boot` element of the general
  YAML configuration.
* ``stop_cloud_init`` can be called with a code element to *stop*
  `kanod_configure`. This will not trigger an error and be considered as a
  standard stop.

Schema part
^^^^^^^^^^^

All schemas are merged:

* Non overlapping fields are simply added, overlapping fields are merged
* Arrays are concatenated. No order preservation should be expected.
* Other elements (strings numbers) must be exactly identical or the merge
  will fail.

It is recommended to avoid deeply nested schema structures (like object
definitions within object definitions) and to use
the definitions part and references to the elements defined in that part.
Otherwise tools for documentation generation will also produce hard to read
deeply nested arrays.

Defining a build
----------------
How elements are assembled to build an image is described in the different
modules supplied to ``kanod-image-builder``. Each module should contain a
``config.yaml`` element describing when to use the elements provided by the
module.

This file is roughly divided in three parts:

* The definition of a set of new flags and options used to customize the image
  built
* A set of environment variables definitions. It sets the execution environment
  of ``diskimage-builder``
* Finally a set of guarded inclusion commands defining which elements and
  packages to include under several conditions.

A simple example
----------------
Folder ``demo`` contains a minimalist example that changes the banner on an
Ubuntu image. The user must set the new greeting in the ``greeting`` field in
the configuration file.

To build an image containing the demo elements. The following actions must
be performed in the ``image_builder`` folder:

    pip3 install .
    pip3 install demo
    kanod-image-builder kanod_demo -o demo

The structure of the demo folder is the following:

Note that ``setup.cfg``, ``setup.py``, ``MANIFEST.in``
and ``kanod_demo/__init__.py`` are necessary for the structure of the library.
``setup.cfg`` and ``MANIFEST.in`` must be modified to take into account at
least the name of the module.

The ``config.yaml`` shows a simple example of a configuration flag that
triggers the definition of a diskimage-builder variable. 
A single element is registered in the module::

    demo
    ├── kanod_demo
    │   ├── config.yaml
    │   ├── elements
    │   │   └── kanod-greeter
    │   │       ├── element-deps
    │   │       ├── kanod
    │   │       │   └── greeter.py
    │   │       ├── post-install.d
    │   │       │   └── 10-disable-news
    │   │       ├── README.rst
    │   │       ├── schema.yaml
    │   │       └── static
    │   │           └── etc
    │   │               └── update-motd.d
    │   │                   └── 05-show-issue
    │   └── __init__.py
    ├── MANIFEST.in
    ├── setup.cfg
    └── setup.py

Note that the element mixes both standard static configuration and a post install
from diskimage-builder and the declaration of Kanod cloud-init configuration
(``kanod`` folder and ``schema.yaml``).
